  name: Build Docker Images

  env:
    ECR_REPO_URL: ${{ vars.ECR_REPOSITORY_URL }}

  on:
    #   push:
    #     branches:
    #       - dev
      workflow_dispatch:
        inputs:
          confirmation:
            description: 'Build Docker Images'
            required: true
            default: 'no'
  
  jobs:
    update_and_push:
      runs-on: ubuntu-latest
  
      steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Prompt for confirmation
        if: ${{ github.ref == 'refs/heads/dev' && github.event.inputs.confirmation == 'yes' }}
        working-directory: src
        run: echo "User confirmed Build Docker Images"
  
      - name: Get Client counter value from DynamoDB 
        id: get_client_counter 
        run: |
          chmod +x ./src/get_item.sh 
          counter_value=$(./src/get_item.sh Client)
          echo "::set-output name=value::$counter_value"
  
      - name: Get Server counter value from DynamoDB 
        id: get_server_counter
        run: |
          chmod +x ./src/get_item.sh 
          counter_value=$(./src/get_item.sh Server)
          echo "::set-output name=value::$counter_value"
  
      - name: Build, tag, and push client image to ECR
        run: |
          counter_value=${{ steps.get_client_counter.outputs.value }}
          docker build -t $ECR_REPO_URL:client-v${counter_value} ./src/client
          if [ $? -eq 0 ]; then
            docker push $ECR_REPO_URL:client-v${counter_value}
            chmod +x ./src/update_item.sh 
            ./src/update_item.sh Client $((counter_value + 1)) 
          else
            echo "Build failed."
            exit 1
          fi
    
      - name: Build, tag, and push server image to ECR
        run: |
          counter_value=${{ steps.get_server_counter.outputs.value }}
          docker build -t $ECR_REPO_URL:server-v${counter_value} ./src/server
          if [ $? -eq 0 ]; then
            docker push $ECR_REPO_URL:server-v${counter_value}
            chmod +x ./src/update_item.sh 
            ./src/update_item.sh Server $((counter_value + 1))
          else
            echo "Build failed."
            exit 1
          fi