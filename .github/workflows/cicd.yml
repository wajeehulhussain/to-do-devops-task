name: To-do App DevOps Pipeline
on:
  push:
    branches: 
      - dev

jobs:
  configure-aws-credentials:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

  deploy-iac:
    needs: configure-aws-credentials
    runs-on: ubuntu-latest
    outputs:
      ecr-repo-url: ${{ steps.ecr-repo-url.outputs.ECR_REPOSITORY_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Store Branch Name
        run: echo "Branch_Name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Initialize Terraform
        id: terraform-initialize
        run: |
          cd iaac
          terraform init

      - name: Plan Terraform changes
        id: terraform-plan
        run: |
          cd iaac
          terraform plan -var-file="terraform-tfvars/${Branch_Name}.tfvars" > plan.out

      - name: Prompt for confirmation
        id: terraform-apply
        run: |
          cd iaac
          cat plan.out
          terraform apply -var-file="terraform-tfvars/${Branch_Name}.tfvars" --auto-approve

      - name: Save ECR repository URI to environment variable
        id: ecr-repo-url
        run: |
          echo "::set-output name=ECR_REPOSITORY_URL::$(terraform output ecr_repo_url)"
          echo $ECR_REPOSITORY_URL

  docker_build_and_push:
    needs: [deploy-iac, configure-aws-credentials]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to AWS ECR
        run: echo "${{ secrets.AWS_ACCESS_KEY_ID }}" | docker login --username AWS --password-stdin "${{ secrets.AWS_ACCOUNT_ID }}".dkr.ecr."${{ secrets.AWS_REGION }}".amazonaws.com

      - name: Build and Push Docker Images
        run: |
          docker build -t ${{ needs.deploy-iac.outputs.ecr-repo-url }}/client ./src/client
          docker push ${{ needs.deploy-iac.outputs.ecr-repo-url }}/client
          docker build -t ${{ needs.deploy-iac.outputs.ecr-repo-url }}/server ./src/server
          docker push ${{ needs.deploy-iac.outputs.ecr-repo-url }}/server
